library(fivethirtyeight)
head(bechdel)
table(bechdel$binary)
sum(bechdel$test == "notalk")
PassData = filter(bechdel, binary == "PASS")
nrow(PassData)
install.packages("fivethirtyeight")
binom.test(803, 1794)
library(datasets)
HairColorData = data.frame(HairEyeColor)
?HairEyeColor
head(HairEyeColor)
head(HairColorData)
FilteredHair = filter(HairColorData, Hair %in% c("Black", "Blond"), Eye %in% c("Brown", "Blue"))
FilteredHair = filter(HairColorData, Hair %in% c("Black", "Blond"),
Eye %in% c("Brown", "Blue"))
FilteredHair = filter(HairColorData, Hair %in% c("Black", "Blond"), Eye %in% c("Brown", "Blue"))
head(FilteredHair)
FilteredData = filter(HairColorData, Hair %in% c("Black", "Blond"),
Eye %in% c("Brown", "Blue"))
?datasets
HairColorData = data.frame(HairEyeColor)
FilteredData = filter(HairColorData, Hair %in% c("Black", "Blond"),
Eye %in% c("Brown", "Blue"))
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
head(bechdel)
table(bechdel$binary)
sum(bechdel$test == "notalk")
PassData = filter(bechdel, binary == "PASS")
nrow(PassData)
binom.test(803, 1794)
library(datasets)
?datasets
HairColorData = data.frame(HairEyeColor)
FilteredData = filter(HairColorData, Hair %in% c("Black", "Blond"),
Eye %in% c("Brown", "Blue"))
FinalData = summarise(GroupedData, Total = sum(Freq))
GroupedData = group_by(FilteredData, Hair, Eye)
FinalData = summarise(GroupedData, Total = sum(Freq))
source('~/.active-rstudio-document', echo=TRUE)
TwoByTwoData = spread(FinalData, Eye, Total)
GroupedData = group_by(FilteredData, Hair, Eye)
FinalData = summarise(GroupedData, Total = sum(Freq))
spread(FinalData, Eye, Total)
TwoByTwoData = spread(FinalData, Eye, Total)
TestReadyData = select(TwoByTwoData, -Hair)
TwoByTwoData = spread(FinalData, Eye, Total)
head(TwoByTwoData)
?spread
fisher.test(TestReadyData)
FilteredData = filter(HairColorData, Hair %in% c("Black", "Blond"),
Eye %in% c("Brown", "Blue"))
GroupedData = group_by(FilteredData, Hair, Eye)
FinalData = summarise(GroupedData, Total = sum(Freq))
spread(FinalData, Eye, Total)
TwoByTwoData = spread(FinalData, Eye, Total)
TwoByTwoData = ungroup(TwoByTwoData)
TestReadyData = select(TwoByTwoData, -Hair)
fisher.test(TestReadyData)
?US_births_2000_2014
head(US_births_2000_2014)
GroupedData = (US_births_2000_2014, day_of_week)
GroupedData = group_by(US_births_2000_2014, day_of_week)
Yikes = summarise(GroupedData, TotalBirths = sum(births))
head(Yikes)
TestData = select(Yikes, TotalBirths) # select(Yikes, -day_of_week) also would have worked
ChisqResult = chisq.test(TestData)
ChisqResult
ggplot(Yikes, aes(x=day_of_week, y=TotalBirths)) + geom_bar(stat="identity")
BirthData = filter(US_births_2000_2014, year %in% c(2000, 2014))
FinalData = summarise(GroupedData, TotalBirths = sum(births))
FinalData
ArrangedData = spread(FinalData, year, TotalBirths)
BirthData = filter(US_births_2000_2014, year %in% c(2000, 2014))
GroupedData = group_by(BirthData, year, day_of_week)
FinalData = summarise(GroupedData, TotalBirths = sum(births))
ArrangedData = spread(FinalData, year, TotalBirths)
FinalData
ArrangedData = spread(FinalData, year, TotalBirths)
ArrangedData
chisq.test(ArrangedDataFinal)
# compare two conditions to each other
BirthData = filter(US_births_2000_2014, year %in% c(2000, 2014))
GroupedData = group_by(BirthData, year, day_of_week)
FinalData = summarise(GroupedData, TotalBirths = sum(births))
ArrangedData = spread(FinalData, year, TotalBirths)
ArrangedDataFinal = select(ArrangedData, -day_of_week)
chisq.test(ArrangedDataFinal)
?setwd
kidAAdata_number <- read.delim("~/Desktop/kidAAdata_number.dms", header=FALSE)
View(kidAAdata_number)
install.packages(tidyverse)
install.packages("tidyverse")
kidAAdata_number = numberData
numberData <- kidAAdata_number
library(readr)
dataset <- read_csv(NULL)
View(dataset)
kidAAdata_area <- read.delim("~/Desktop/kidAAdata_area.dms", header=FALSE)
View(kidAAdata_area)
kidAAdata_number <- areaData
areaData <- kidAAdata_area
subjectNumber = areaData$V1
areaData$subjectNumber = areaData$V1
areaData$subjectName = areaData$V2
groupedData = group_by(areaData, V3)
import.packages(c(tidyr, dplyr, ggplot2))
import.packages(c("tidyr", "dplyr", "ggplot2"))
install.packages(c("tidyr", "dplyr", "ggplot2"))
groupedData = group_by(areaData, V3)
install.packages("tidyverse")
import(areaData)
?areaData
head(areaData)
groupedData = group_by(areaData, age)
?group_by
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime")
groupedData = group_by(areaData, age)
library(dplyr)
library(tidyr)
library(ggplot2)
GroupedData = group_by(areaData, age, accuracy)
summarise(GroupedData, success = sum(accuracy))
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime")
GroupedData = group_by(numberData, trialType, numerosity)
summarise(GroupedData, success = sum(accuracy))
ggplot(data = GroupedData, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity")
library(dplyr)
library(tidyr)
library(ggplot2)
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime")
GroupedData = group_by(numberData, trialType, numerosity)
summarise(GroupedData, success = sum(accuracy))
ggplot(data = GroupedData, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity")
areaData <- read.delim("~/Desktop/Yale CDL Summer 2018/Research/KidAA/Data Analysis/kidAAdata_area.dms", header=FALSE)
View(areaData)
numberData <- read.delim("~/Desktop/Yale CDL Summer 2018/Research/KidAA/Data Analysis/kidAAdata_number.dms", header=FALSE)
View(numberData)
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime")
GroupedData = group_by(numberData, trialType, numerosity)
summarise(GroupedData, success = sum(accuracy))
ggplot(data = GroupedData, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity")
GroupedData = group_by(numberData, trialType, numerosity)
summaryNumber = summarise(GroupedData, success = sum(accuracy))
ggplot(data = summaryNumber, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity")
GroupedData = group_by(numberData, trialType)
summaryNumber = summarise(GroupedData, success = sum(accuracy))
ggplot(data = summaryNumber, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity")
GroupedData = group_by(numberData, trialType, numerosity, age)
summaryNumber = summarise(GroupedData, success = sum(accuracy))
ggplot(data = summaryNumber, aes(x = numerosity, y = success, color = age, shape = trialType)) + geom_point(stat="identity")
ggplot(data = summaryNumber, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity") + facet_wrap(~age)
areaData$ratio = (areaData$AAone + areaData$AAtwo)
?remove
remove(c(areaData$AAone, areaData$$AAtwo))
remove(c(areaData$AAone, areaData$AAtwo))
remove(areaData$AAone, areaData$AAtwo)
remove("areaData$AAone", "areaData$AAtwo")
remove(list = character("areaData$AAone", "areaData$AAtwo"))
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "pickWords," "correctChoice", "accuracy", "responseTime")
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "pickWords", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime", "ratio")
names(areaData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "AAone", "AAtwo", "pick", "pickWords", "correctChoice", "accuracy", "responseTime")
names(numberData) = c("subjectNumber", "subjectName", "age", "trialNumber", "trialID", "trialType", "numerosity", "correctChoiceNumeric", "pick", "correctChoice", "accuracy", "responseTime")
GroupedData = group_by(numberData, trialType, numerosity, age)
summaryNumber = summarise(GroupedData, success = sum(accuracy))
ggplot(data = summaryNumber, aes(x = numerosity, y = success, color = trialType)) + geom_point(stat="identity") + facet_wrap(~age)
areaData$ratio = (areaData$AAone + areaData$AAtwo)
groupedArea = group_by(areaData, ratio, age,
groupedArea = group_by(areaData, ratio, age)
summaryArea = summarise(groupedArea, success = sum(accuracy))
groupedArea = group_by(areaData, ratio, age)
summaryArea = summarise(groupedArea, success = sum(accuracy))
library(readxl)
ages <- read_excel("Desktop/KidAAExperimentNotes6.29.18.xlsx")
View(ages)
ageTallies = group_by(ages, AGE)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tidyverse")
groupedAges = group_by(age, AGE)
library(dplyr)
?group_by
groupedAges = group_by(age, AGE)
groupedAges = group_by(ages, AGE)
library(readxl)
ages <- read_excel("Desktop/KidAAExperimentNotes6.29.18.xlsx",
col_types = c("blank", "blank", "numeric",
"blank", "blank"))
View(ages)
groupedAges = group_by(age, AGE)
groupedAges = group_by(age, "AGE")
groupedAges = group_by(ages, AGE)
ageTallies = summarise(groupedAges, tally = sum(AGE))
ageTallies = summarise(groupedAges, tally = freq(AGE))
?frequency
library(tidyr)
?freq
?count
ageTallies = summarise(groupedAges, tally = count(AGE))
install.packages("plyr")
library(plyr)
ageTallies = summarise(groupedAges, tally = count(AGE))
View(ageTallies)
install.packages("tidyverse")
library(dplyr)
library(ggplot2)
library(tidyr)
# One
install.packages("fivethirtyeight")
library(fivethirtyeight)
?bechdel
bechdel
data.frame(bechdel) = bechdel
expensiveMovies = data.frame(filter(bechdel, "budget" > 50000000))
lessExpensiveMovies = data.frame(filter(bechdel, "budget" <= 50000000))
<=
?<=
lessExpensiveMovies = data.frame(filter(bechdel, "budget" <= 50000000))
lessExpensiveMovies = data.frame(filter(bechdel, "budget" < 50000000))
expensiveMovies = data.frame(filter(bechdel, budget > 50000000))
lessExpensiveMovies = data.frame(filter(bechdel, budget < 50000000))
# Two
binom.test(sum(expensiveMovies$binary == "PASS"), nrow(expensiveMovies))
binom.test(sum(lessExpensiveMovies$binary == "PASS"), nrow(expensiveMovies))
binom.test(sum(lessExpensiveMovies$binary == "PASS"), nrow(lessExpensiveMovies))
n = nrow(expensiveMovies)
p = binom.test(sum(expensiveMovies$binary == "PASS"), nrow(expensiveMovies))
p = binom.test(sum(expensiveMovies$binary == "PASS"), nrow(expensiveMovies))$estimate
# Five
dankData = data.frame(rbinom(10000,n,p))
ggplot(dankData, aes(y = frequency)) + geom_histogram(stat="identity")
ggplot(dankData, aes(x = p, y = n)) + geom_histogram(stat="identity")
ggplot(dankData, aes(x = p, y = frequency)) + geom_histogram(stat="identity")
ggplot(dankData, aes(x = p, y = frequency)) + geom_histogram(stat="identity", bindwidth=1)
head(dankData)
ggplot(dankData, aes(x=dankData)) + geom_histogram(stat="identity",bindwidth=1)
dankData = rbinom(10000,n,p)
dankerData = data.frame(dankData)
ggplot(dankerData, aes(x=dankData)) + geom_histogram(stat="identity",bindwidth=1)
ggplot(dankerData,aes(x=dankData)) + geom_histogram()
ggplot(dankerData,aes(x=dankData/nrow(dankData))) + geom_histogram()
ggplot(dankerData,aes(x=1)) + geom_histogram()
ggplot(dankerData,aes(x=dankData)) + geom_histogram()
ggplot(dankerData,aes(x=dankData)) + geom_histogram(binwidth=1)
head(dankerData)
names(dankerData) = (c("col1", "col2"))
names(dankerData) = ("column")
expensiveMoviesPass = sum(expensiveMovies$binary == "PASS")
names(dankerData) = ("sucesses")
nSuccesses = filter(dankerData, sucesses >= expensiveMoviesPass)
bechdelProbability = nSuccesses/10000
expensiveMoviesPass = sum(expensiveMovies$binary == "PASS")
names(dankerData) = ("sucesses")
successes = filter(dankerData, sucesses >= expensiveMoviesPass)
nSuccesses = nrow(successes)
bechdelProbability = nSuccesses/10000
# Seven
dbinom(n,p)
library(tidyverse)
library(dplyr)
library(fivethirtyeight)
max(congress_age$age)
filter(congress_age, age == max(age))
head(congress_age)
filter(congress_age, age == min(age))
filter(congress_age, year == max(year))
# separate columns like termstart into multiple columns
congress_age = separate(congress_age,termstart,sep="-",
into = c("year", "month", "day"))
# the arguments: dataset, column to separate, separator, names of resulting columns
# note that this function returns a DF like the one in the input, but with the desired column separated.
filter(congress_age, year == max(year))
congress_age = separate(congress_age,termstart,sep="-",
into = c("year", "month", "day"))
congress_age = separate(congress_age,"termstart",sep="-",
into = c("year", "month", "day"))
filter(congress_age, age == max(age), year == max(year))
head(new_congress_age)
new_congress_age = filter(congress_age, age == max(age), year == max(year))
head(new_congress_age)
# find the oldest person in the most recent year in the DF
newestYear = filter(congress_age, year == max(year))
oldest = filter(newestYear, year == max(year))
filter(newestYear, year == max(year))
filter(newestYear, age == max(age))
# onto t-tests. we use t-tests in cases where our data is continuous.
# using a t-test on binary data is a little bit sketchy.
TestData = filter(congress_age, party == "D" or "R")
# onto t-tests. we use t-tests in cases where our data is continuous.
# using a t-test on binary data is a little bit sketchy.
TestData = filter(congress_age, party == "D", party == "C")
# onto t-tests. we use t-tests in cases where our data is continuous.
# using a t-test on binary data is a little bit sketchy.
TestData = filter(congress_age, party %in% c("D", "R"))
TestData = select(TestData, party, age)
head(TestData)
TestData = group_by(TestData, party)
ggplot(TestData, aes(x = age)) + geom_histogram(stat="identity")
ggplot(TestData, aes(x = age)) + geom_histogram()
ggplot(TestData, aes(x = age, color = party)) + geom_histogram()
ggplot(TestData, aes(x = age, color = party)) + geom_histogram(position="dodge")
TestData = group_by(TestData, party)
ggplot(TestData, aes(x = age, fill = party)) + geom_histogram(position="dodge")
ggplot(TestData, aes(x = age, fill = party)) + geom_histogram() + facet_wrap(~party)
nObservatinos = nrow(TestData)
# null hypothesis: mean age of congress members is the same as that of american citizens
# t test function arguments: variable of interest, mean for comparison
t.test(TestData$age, mu = 37.8)
t.test(TestData$age, mu = 53.15)
# TWO SAMPLE T-TEST
DemocratAges = filter(TestData, party == "D")
RepublicanAges = filter(TestData, party == "R")
t.test(DemocratAges$age, RepublicanAges$age)
# basically "can party predict someone's age"?
t.test(age ~ party, data = TestData)
library(car)
leveneTest(age ~ party, data = TestData)
# U-TESTS: FOR NON-NORMALLY DISTRIBUTED, DISCRETE, OR ORDINAL DATA
# data is ranked for deviation from some baseline value
# we calculate the probability that the rankings could result from chance assignment
wilcox.test(TestData$age, mu = 37.8)
#two-sample
wilcox.test(age ~ party, data = TestData)
# where the paired t-test gave us wacky results, this wilcox test does not.
# so, wilcox/u-tests can help us when our dataset includes outliers and when it's not normally distributed.
# paired
wilcox.test(age ~ party, data = TestData, paired = TRUE)
# CORRELATIONS: PEARSON'S, SPEARMAN'S, AND KENDALL'S
?vocab
head(vocab)
# CORRELATIONS: PEARSON'S, SPEARMAN'S, AND KENDALL'S
library(car)
?vocab
head(vocab)
?Vocab
head(Vocab)
ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_point()
ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_jitter()
ggplot(Vocab, aes(x = education, y = vocabulary)) + geom_jitter(alpha = 1/8)
# pearson's correlation: calculate average score on both axes, then calculate deviation from these averages for each data point.
# if positions along axes vary together, correlation will be high
cor.test(Vocab$education, Vocab$vocabulary)
# to keep yourself from seeing the p-value:
cor(Vocab$education, Vocab$vocabulary)
?comma_survey
select(comma_survey, education, care_oxford_comma)
comma_survey = select(comma_survey, education, care_oxford_comma)
commas = select(comma_survey, education, care_oxford_comma)
commas = filter(commas, education != "NA", care_oxford_comma != "NA")
commas = filter(commas, education != "NA", care_oxford_comma != "NA")
groupedCommas = group_by(commas, education)
ggplot(commas, aes(x = education)) + geom_histogram()
ggplot(commas, aes(x = education)) + geom_histogram(stat="count")
install.packages("Stat2Data")
library(Stat2Data)
data("ReligionGDP")
?ReligionGDP
ggplot(ReligionGDP, aes(x = Religiosity, y = GDP)) + geom_point()
ggplot(ReligionGDP, aes(x = Religiosity, y = GDP, label = Country)) + geom_point()
ggplot(ReligionGDP, aes(x = Religiosity, y = GDP, label = Country)) + geom_point()
ggplot(ReligionGDP, aes(x = Religiosity, y = GDP, label = Country)) + geom_text()
SimplifiedReligion = filter(ReligionGDP, Country != "United States", Country != "Kuwait")
SimplifiedReligion = filter(ReligionGDP, Country != "United_States", Country != "Kuwait")
ggplot()
ggplot(ReligionGDP, aes(x = Religiosity, y = GDP, label = Country)) + geom_text()
ggplot(SimplifiedReligion, aes(x = Religiosity, y = GDP, label = Country)) + geom_text()
ggplot(SimplifiedReligion, aes(x = Religiosity, y = GDP, label = Country)) + geom_point()
cor.test(SimplifiedReligion$Religiosity, SimplifiedReligion$GDP)
# Spearman's correlation tests for an ordinal relationship--is there a general pattern (not necessarily linear) in your data?
# Spearman's correlation can better handle outliers.
cor(SimplifiedReligion$Religiosity, SimplifiedReligion$GDP, method = "spearman")
head(commas)
levels(commas$care_oxford_comma)
levels(commas$education)
commas$num_carecomma = as.numeric(commas$care_oxford_comma)
commas$num_education = as.numeric(commas$education)
cor(commas$num_carecomma, commas$num_education, method = "spearman")
groupedCommas = group_by(commas, care_oxford_comma, education)
counts = summarise(groupedCommas, totalResponses = n())
head(counts)
counts
# Kendall's rank correlation compares each possible pair of data points and classifies them as either "concordant," "discordant," or "neither"
cor(SimplifiedReligion$Religiosity, SimplifiedReligion$GDP, method = "kendall")
library(tidyverse)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
R.Version()
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
source('~/.active-rstudio-document', echo=TRUE)
library("xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("xlsx");
library("xlsx")
install.packages("readxl")
library("readxl")
getwd()
getwd()
setwd("/Users/Emma/Desktop")
setwd("/Users/Emma/Desktop/COGS319 MNIST")
install.packages("readxl")
library("readxl")
setwd("/Users/Emma/Desktop/COGS319 MNIST")
data <- readxl("COGS311_Study1_ Responses.xlsx")
setwd("/Users/Emma/Desktop/COGS319 MNIST")
data <- read_excel("COGS311_Study1_ Responses.xlsx")
head(data)
data <- data[-c(1:2)]
View(data)
data
mutate(data, subject = as.numeric(rownames(df)))
library("tidyverse")
mutate(data, subject = as.numeric(rownames(df)))
mutate(data, subject = 0:29)
mutate(data, subject = 1:29)
data
data <- mutate(data, subject = 1:29)
data
clean_data <- data.frame()
clean_data.subject <- data.subject
clean_data(subject) <- data(subject)
clean_data[1] <- data[105]
View(clean_data)
clean_data <- data.frame(row_names=(1:29))
View(clean_data)
data[102]
View(data)
clean_Data %>% mutate(image=1:50)
clean_data %>% mutate(image=1:50)
clean_data %>% mutate(image=1:50)
clean_data <- data.frame()
clean_data %>% mutate(image=1:50)
clean_data <- data.frame(row_names=1:100)
clean_data %>% mutate(image=1:50)
clean_data %>% mutate(image=(1:50, 1:50))
clean_data %>% mutate(image=(c(1:50, 1:50))
View(clean_data)
data <- read_excel("COGS311_Study1_ Responses.xlsx")
setwd("/Users/Emma/Desktop/COGS319 MNIST")
data <- read_excel("COGS311_Study1_ Responses.xlsx")
View(data)
data <- data[-c(1:3, 103:106)]
data %>% t()
# Load data
library("readxl")
library("tidyverse")
setwd('/Users/Emma/Documents/GitHub/info-aes/Behavioral/data')
atypicality_data <- read_excel('pilot_data.csv')
# Load data
library("tidyverse")
setwd('/Users/Emma/Documents/GitHub/info-aes/Behavioral/data')
atypicality_data <- read_csv('pilot_data.csv')
View(atypicality_data)
atypicality_data %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)
# Tidy data
atypicality_data %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL))
atypicality_data %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% filter(trial_type==html-button-response) %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% filter(trial_type=="html-button-response") %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% filter(left_image!=NA) %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% filter(left_image!="NA") %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Load data
library("tidyverse")
setwd('/Users/Emma/Documents/GitHub/info-aes/Behavioral/data')
atypicality_data <- read_csv('pilot_data.csv')
# Tidy data
atypicality_data <- atypicality_data %>% filter(left_image!="NA") %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Load data
library("tidyverse")
setwd('/Users/Emma/Documents/GitHub/info-aes/Behavioral/data')
atypicality_data <- read_csv('pilot_data.csv')
# Tidy data
atypicality_data <- atypicality_data %>% filter(left_image!="NULL") %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
# Tidy data
atypicality_data <- atypicality_data %>% filter(left_image!="NULL") %>% mutate(winner=if_else(button_pressed==0, left_image, right_image, missing = NULL)) %>% mutate(loser=if_else(button_pressed==0, right_image, left_image, missing = NULL))
ELO_data <- atypicality_data %>% select(subject_id, winner, loser)
View(ELO_data)
install.packages("EloChoice")
install.packages(EloChoice)
setwd('/Users/Emma/Documents/GitHub/info-aes/Behavioral/')
install.packages(EloChoice, respo = NULL, type = 'source')
install.packages(EloChoice.tar.gz, repos = NULL, type = "source")
ls
install.packages(EloChoice_0.29.tar.gz, repos = NULL, type = "source")
getwd()
